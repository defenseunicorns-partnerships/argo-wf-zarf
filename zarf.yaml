kind: ZarfPackageConfig
metadata:
  name: argo-workflows
  description: Templated deployment of Argo Workflows
  version: 0.1.21 # x-release-please-version
constants:
  - name: NAMESPACE
    description: the namespace to deploy argo-workflows to
    value: argo
variables:
  - name: DEPLOY_POSTGRESQL
    description: If "true", an in-cluster Postgresql instance will be deployed using the below variables
  - name: PG_USER
    description: The user to access the argo database in postgres
  - name: PG_USER_PASSWORD
    description: The user password to access the argo database in postgres
  - name: PG_DB
    description: Postgres argo database
    prompt: true
  - name: PG_HOST
    description: Postgres hostname. If DEPLOY_POSTGRESQL is "true", then the value of this should be "dex-web-server-postgresql.dex-web-server.svc.cluster.local"
    prompt: true
  - name: PG_PORT
    description: port to communicate with postgres. If DEPLOY_POSTGRESQL is "true", then the value of this should be "5432"
  - name: PG_PASSWORD
    description: Password for the user account specified in PG_USER. If DEPLOY_POSTGRESQL is "true", this will also be the password for the "postgres" admin user.
    prompt: true
    sensitive: true
  - name: PG_STORAGE_CLASS
    description: Storage class for postgresql
  - name: ARCHIVE_TTL
    description: Time to keep archived workflows in Postgres
    default: 10d
  - name: PARELLELISM
    description: Number of workflows that can run simultaneously
    prompt: true
    default: "5"
  - name: RATE_BURST
    description: Burst QPS before the RATE_LIMIT is enforced
    prompt: true
    default: "30"
  - name: RATE_LIMIT
    description: QPS enforcement
    prompt: true
    default: "20"
  - name: WF_TTL_SECONDS_AFTER_SUCCESS
    description: Number of seconds before archiving a workflow after success
    default: "2"
    prompt: true
  - name: WF_TTL_SECONDS_AFTER_FAILURE
    description: Number of seconds before archiving a workflow after failure
    prompt: true
    default: "3600"
  - name: CONTR_MEM_REQ
    description: Memory request for the controller
    default: 512Mi
  - name: CONTR_CPU_REQ
    description: CPU request for the controller
    default: 500m
  - name: CONTR_MEM_LIM
    description: Memory Limit for the controller
    default: 1Gi
  - name: CONTR_CPU_LIM
    description: CPU Limit for the controller
    default: 1200m
  - name: DEV_DEPLOYMENT
    description: Boolean value (set in zarf-config.yaml) on whether to use static credentials for artifact repositories
  - name: DOMAIN
    description: Domain that argo is deployed to
    default: uds.dev
  - name: CLIENT_SECRET
    description: Name of the client secret created for argo server
    default: argo-workflows-client
  - name: EXEC_MEM_REQ
    description: Memory request for the controller
    default: 512Mi
  - name: EXEC_CPU_REQ
    description: CPU request for the controller
    default: 100m
  - name: EXEC_MEM_LIM
    description: Memory Limit for the controller
    default: 1Gi
  - name: EXEC_CPU_LIM
    description: CPU Limit for the controller
    default: 500m
  - name: SERVER_MEM_REQ
    description: Memory request for the server
    default: 64Mi
  - name: SERVER_CPU_REQ
    description: CPU request for the server
    default: 100m
  - name: SERVER_MEM_LIM
    description: Memory Limit for the server
    default: 128Mi
  - name: SERVER_CPU_LIM
    description: CPU Limit for the server
    default: 500m
  - name: S3_ENDPOINT
    description: 'Endpoint to use to connect to S3. Example: "s3.amazonaws.com" or "minio.bigbang.dev"'
    prompt: true
  - name: S3_REGION
    description: 'Region of the S3 bucket'
    prompt: true
  - name: S3_BUCKET_NAME
    description: 'Name of the S3 bucket to use'
    prompt: true
  - name: S3_ACCESS_KEY
    description: The Access key for the S3 service
    prompt: true
    sensitive: true
  - name: S3_SECRET_KEY
    description: The Secret key for the S3 service
    prompt: true
    sensitive: true
  - name: S3_PORT
    description: Port to connect to S3 API on
  - name: DEFAULT_ARTIFACT_REPO
    prompt: true
    sensitive: false
    description: choose between minio-artifact-repository or aws-artifact-repository
    default: minio-artifact-repository
  - name: IRSA_ROLE_ARN
    description: The ARN of the IRSA Role to be used with the serviceaccounts
    sensitive: true
    prompt: true
  - name: ARGO_REGISTRY
    description: Used with flavor, either quay.io or registry1.dso.mil
  - name: ARGO_REPO
    description: image repository prefix used with flavors
  - name: ARGO_SERVER_REPO
    description: image repository for argocli image
  - name: PSQL_REGISTRY
    description: Used with flavors to pull the psql image
  - name: PSQL_REPO
    description: Used with flavors to pull the psql image
  - name: PSQL_TAG
    description: Used with flavors to pull the psql image
components:
  - name: argo-setup
    required: true
    manifests:
      - name: argo-namespace
        files:
          - manifests/namespace.yaml
      - name: argo-setup
        files:
          - manifests/roles.yaml
          - manifests/serviceaccounts.yaml
          - manifests/peer-auth.yaml
          - manifests/uds-package.yaml
          - manifests/authorization.yaml
      - name: argo-rolebindings
        files:
          - manifests/rolebindings.yaml
  - name: dev-setup
    required: false
    manifests:
      - name: minio-tokens
        files:
          - manifests/minio-secrets.yaml
  - name: postgresql
    required: true
    description: "Deploy Postgresql"
    only:
      flavor: vanilla
    actions:
      onDeploy:
        before:
          - cmd: echo "docker.io"
            setVariables:
              - name: PSQL_REGISTRY
          - cmd: echo "bitnami/postgresql"
            setVariables:
              - name: PSQL_REPO
          - cmd: echo "15.6.0"
            setVariables:
              - name: PSQL_TAG
    charts:
      - name: postgresql
        namespace: argo
        version: 15.2.5
        url: oci://registry-1.docker.io/bitnamicharts/postgresql
        repoName: postgresql
        valuesFiles:
          - values/postgres-values.yaml
    manifests:
      - name: postgres-secrets
        files:
          - manifests/postgres-secrets.yaml
    images:
      - bitnami/postgresql:15.6.0
  - name: postgresql
    required: true
    description: "Deploy Postgresql"
    only:
      flavor: ironbank
    actions:
      onDeploy:
        before:
          - cmd: echo "registry1.dso.mil"
            setVariables:
              - name: PSQL_REGISTRY
          - cmd: echo "ironbank/opensource/postgres/postgresql-alpine"
            setVariables:
              - name: PSQL_REPO
          - cmd: echo "15.6"
            setVariables:
              - name: PSQL_TAG
    charts:
      - name: postgresql
        namespace: argo
        version: 15.2.5
        url: oci://registry-1.docker.io/bitnamicharts/postgresql
        repoName: postgresql
        valuesFiles:
          - values/postgres-values.yaml
    images:
          - registry1.dso.mil/ironbank/opensource/postgres/postgresql-alpine:15.6
    manifests:
      - name: postgres-secrets
        files:
          - manifests/postgres-secrets.yaml
  - name: argo-workflows
    required: true
    description: "Deploy Argo Workflow"
    only:
      flavor: vanilla
    actions:
      onDeploy:
        before:
          - cmd: echo "quay.io"
            setVariables:
              - name: ARGO_REGISTRY
          - cmd: echo "argoproj"
            setVariables:
              - name: ARGO_REPO
              - name: ARGO_SERVER_REPO
    charts:
      - name: argo-workflows
        namespace: argo
        # renovate: datasource=docker depName=ghcr.io/argoproj/argo-helm/argo-workflows
        version: 0.45.7
        url: oci://ghcr.io/argoproj/argo-helm/argo-workflows
        valuesFiles:
          - values/workflow-values.yaml
    images:
      # renovate: datasource=docker depName=quay.io/argoproj/workflow-controller
      - quay.io/argoproj/workflow-controller:v3.6.4
      # renovate: datasource=docker depName=quay.io/argoproj/argoexec
      - quay.io/argoproj/argoexec:v3.6.4
      # renovate: datasource=docker depName=quay.io/argoproj/argocli
      - quay.io/argoproj/argocli:v3.6.4
  - name: argo-workflows
    required: true
    description: "Deploy Argo Workflow"
    only:
      flavor: ironbank
    actions:
      onDeploy:
        before:
          - cmd: echo "registry1.dso.mil"
            setVariables:
              - name: ARGO_REGISTRY
          - cmd: echo "ironbank/kubeflow/argoproj"
            setVariables:
              - name: ARGO_REPO
          - cmd: echo "ironbank/opensource/argoproj"
            setVariables:
              - name: ARGO_SERVER_REPO
    charts:
      - name: argo-workflows
        namespace: argo
        # renovate: datasource=docker depName=ghcr.io/argoproj/argo-helm/argo-workflows
        version: 0.45.7
        url: oci://ghcr.io/argoproj/argo-helm/argo-workflows
        valuesFiles:
          - values/workflow-values.yaml
    images:
      # renovate: datasource=docker depName=registry1.dso.mil/ironbank/kubeflow/argoproj/workflow-controller
      - registry1.dso.mil/ironbank/kubeflow/argoproj/workflow-controller:v3.6.0
      # renovate: datasource=docker depName=registry1.dso.mil/ironbank/kubeflow/argoproj/argoexec
      - registry1.dso.mil/ironbank/kubeflow/argoproj/argoexec:v3.6.0
      # renovate: datasource=docker depName=registry1.dso.mil/ironbank/opensource/argoproj/argocli
      - registry1.dso.mil/ironbank/opensource/argoproj/argocli:v3.6.2
