{
  $schema: "https://docs.renovatebot.com/renovate-schema.json",
  extends: [
    // Tells Renovate to maintain one GitHub issue as the "dependency dashboard". See https://docs.renovatebot.com/key-concepts/dashboard
    ":dependencyDashboard",
    // Use semantic commit type fix for dependencies and chore for all others if semantic commits are in use. See https://docs.renovatebot.com/presets-default/#semanticprefixfixdepschoreothers
    ":semanticPrefixFixDepsChoreOthers",
    // Ignore node_modules, bower_components, vendor and various test/tests directories. See https://docs.renovatebot.com/presets-default/#ignoremodulesandtests
    ":ignoreModulesAndTests",
    // Apply crowd-sourced package replacement rules. See https://docs.renovatebot.com/presets-replacements/#replacementsall
    "replacements:all",
    // Apply crowd-sourced workarounds for known problems with packages. See https://docs.renovatebot.com/presets-workarounds/#workaroundsall
    "workarounds:all"
  ],
  // This will prevent Renovate from automatically rebasing PRs. Without this, Renovate will rebase PRs whenever it wants to. The 'schedule' param is only for creating PRs. Because we are grouping all changes into one PR without this Renovate will be constantly rebasing that PR which we don't want since every time that happens another set of GHA status checks are kicked off.
  rebaseWhen: "never",
  // Labels to set in Pull Request. See https://docs.renovatebot.com/configuration-options/#labels
  labels: [
    "renovate"
  ],
  // Rate limit PRs to maximum x created per hour. 0 means no limit. See https://docs.renovatebot.com/configuration-options/#prhourlylimit
  prHourlyLimit: 0,
  // Limit to a maximum of x concurrent branches/PRs. 0 means no limit. See https://docs.renovatebot.com/configuration-options/#prconcurrentlimit
  prConcurrentLimit: 0,
  // Enable updates to the pre-commit-config.yaml file. See https://docs.renovatebot.com/modules/manager/pre-commit/
  "pre-commit":  {
    enabled: true
  },
  ignorePaths: [],
  customManagers: [
    {
      customType: "regex",
      fileMatch: ["\.env"],
      matchStrings: [
        "renovate: datasource=(?<datasource>.*?) depName=(?<depName>.*?)( versioning=(?<versioning>.*?))?\\s.*?_VERSION=(?<currentValue>.*)\\s"
      ],
      versioningTemplate: "{{#if versioning}}{{{versioning}}}{{else}}semver-coerced{{/if}}",
      extractVersionTemplate: "^v?(?<version>.*)$"
    },
    {
      customType: "regex",
      fileMatch: [".*\.[yaml|yml]"],
      matchStrings: [
        "renovate: datasource=(?<datasource>.*?) depName=(?<depName>.*?)( versioning=(?<versioning>.*?))?\\s.*?version: (?<currentValue>.*)\\s",
        "renovate: datasource=(?<datasource>.*?) depName=(?<depName>.*?)( versioning=(?<versioning>.*?))?\\s.*?:v(?<currentValue>.*)\\s"
      ],
      versioningTemplate: "{{#if versioning}}{{{versioning}}}{{else}}semver-coerced{{/if}}",
      extractVersionTemplate: "^v?(?<version>.*)$"
    }
  ],
  packageRules: [
    {
      matchDatasources: ["helm"],
      matchPackageNames: ["postgresql"],
      registryUrls: ["https://charts.bitnami.com/bitnami"]
    },
    {
      matchDatasources: ["helm"],
      matchDepNames: ["argo-workflows"],
      registryUrls: ["https://argoproj.github.io/argo-helm"]
    },
    {
      matchPackageNames: ["foo"],
      groupName: "unstable",
      automerge: false
    },
    {
      excludePackageNames: ["foo"],
      groupName: "stable",
      automerge: false
    }
  ],
  hostRules: [
    {
      matchHost: "registry1.dso.mil",
      username: "process.env.IRON_BANK_ROBOT_USERNAME",
      password: "process.env.IRON_BANK_ROBOT_PASSWORD"
    }
  ]
}
