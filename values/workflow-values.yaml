crds:
  keep: false
createAggregateRoles: false
singleNamespace: true

workflow:
  serviceAccount:
    create: false
    name: "argo-workflow"
  rbac:
    create: false

controller:
  image:
    registry: "###ZARF_VAR_ARGO_REGISTRY###"
    repository: "###ZARF_VAR_ARGO_REPO###/workflow-controller"
  parallelism: "###ZARF_VAR_PARALLELISM###"
  resourceRateLimit:
    limit: !!int "###ZARF_VAR_RATE_LIMIT###"
    burst: !!int "###ZARF_VAR_RATE_BURST###"
  rbac:
    create: false
  configMap:
    create: true
    name: "workflows"
  #TODO: Decide on prometheus logging of controller
  metricsConfig:
    # -- Enables prometheus metrics server
    enabled: false
    # -- Path is the path where metrics are emitted. Must start with a "/".
    path: /metrics
    # -- Port is the port where metrics are emitted
    port: 9090
    # -- How often custom metrics are cleared from memory
    metricsTTL: ""
    # -- Flag that instructs prometheus to ignore metric emission errors.
    ignoreErrors: false
    # --  Flag that use a self-signed cert for TLS
    secure: false
    # -- Container metrics port name
    portName: metrics
    # -- Service metrics port
    servicePort: 8080
    # -- Service metrics port name
    servicePortName: metrics
    # -- Flag to enable headless service
    headlessService: false
    # -- ServiceMonitor relabel configs to apply to samples before scraping
    ## Ref: https://github.com/prometheus-operator/prometheus-operator/blob/main/Documentation/api.md#relabelconfig
    relabelings: []
    # -- ServiceMonitor metric relabel configs to apply to samples before ingestion
    ## Ref: https://github.com/prometheus-operator/prometheus-operator/blob/main/Documentation/api.md#endpoint
    metricRelabelings: []
    # -- ServiceMonitor will add labels from the service to the Prometheus metric
    ## Ref: https://github.com/prometheus-operator/prometheus-operator/blob/main/Documentation/api.md#servicemonitorspec
    targetLabels: []
  securityContext:
    readOnlyRootFilesystem: true
    runAsNonRoot: true
    allowPrivilegeEscalation: false
    capabilities:
      drop:
        - ALL
  persistence:
    nodeStatusOffLoad: true
    archive: true
    archiveTTL: "###ZARF_VAR_ARCHIVE_TTL###"
    postgresql:
      host: "###ZARF_VAR_PG_HOST###"
      port: !!int "###ZARF_VAR_PG_PORT###"
      database: "###ZARF_VAR_PG_DB###"
      tableName: argo_workflows
      userNameSecret:
        name: postgres-config
        key: PG_USER
      passwordSecret:
        name: postgres-config
        key: PG_USER_PASSWORD
  workflowDefaults:
    spec:
      activeDeadlineSeconds: 3600
      ttlStrategy:
        secondsAfterSuccess: !!int "###ZARF_VAR_WF_TTL_SECONDS_AFTER_SUCCESS###"
        secondsAfterFailure: !!int "###ZARF_VAR_WF_TTL_SECONDS_AFTER_FAILURE###"
      podGC:
        strategy: OnPodCompletion
      archiveLogs: true
      podMetadata:
        annotations:
          workflows.argoproj.io/kill-cmd-istio-proxy: '["pilot-agent", "request", "POST", "quitquitquit"]'
  # TODO: Resource limiting of workers etc.
  # -- Number of workflow workers
  workflowWorkers: # 32
  # -- Number of workflow TTL workers
  workflowTTLWorkers: # 4
  # -- Number of pod cleanup workers
  podCleanupWorkers: # 4
  # -- Number of cron workflow workers
  # Only valid for 3.5+
  cronWorkflowWorkers: # 8
  workflowRestrictions:
    templateReferencing: Secure

  #TODO: Prometheus telemetry
  # as metrics by default, but can be overridden using this config.
  telemetryConfig:
    # -- Enables prometheus telemetry server
    enabled: false
    # -- telemetry path
    path: /telemetry
    # -- telemetry container port
    port: 8081
    # -- How often custom metrics are cleared from memory
    metricsTTL: ""
    # -- Flag that instructs prometheus to ignore metric emission errors.
    ignoreErrors: false
    # --  Flag that use a self-signed cert for TLS
    secure: false
    # -- telemetry service port
    servicePort: 8081
    # -- telemetry service port name
    servicePortName: telemetry
  serviceMonitor:
    # -- Enable a prometheus ServiceMonitor
    enabled: false
    # -- Prometheus ServiceMonitor labels
    additionalLabels: {}
    # -- Prometheus ServiceMonitor namespace
    namespace: "" # "monitoring"
  serviceAccount:
    # -- Create a service account for the controller
    create: false
    # -- Service account name
    name: "controller-account"
    # -- Labels applied to created service account
    labels: {}
    # -- Annotations applied to created service account
    annotations: {}

  name: workflow-controller
  #TODO: Set resources for controller
  resources:
    requests:
      memory: ###ZARF_VAR_CONTR_MEM_REQ###
      cpu: ###ZARF_VAR_CONTR_CPU_REQ###
    limits:
      memory: ###ZARF_VAR_CONTR_MEM_LIM###
      cpu: ###ZARF_VAR_CONTR_CPU_LIM###
  clusterWorkflowTemplates:
    enabled: false

  #TODO: Set retention policies
  # -- Workflow retention by number of workflows
  retentionPolicy: {}
  #  completed: 10
  #  failed: 3
  #  errored: 3

mainContainer:
  securityContext:
    runAsNonRoot: true
    allowPrivilegeEscalation: false
    runAsUser: 1001
    capabilities:
      drop:
        - ALL

executor:
  image:
    registry: "###ZARF_VAR_ARGO_REGISTRY###"
    repository: "###ZARF_VAR_ARGO_REPO###/argoexec"
  resources:
    requests:
      memory: ###ZARF_VAR_EXEC_MEM_REQ###
      cpu: ###ZARF_VAR_EXEC_CPU_REQ###
    limits:
      memory: ###ZARF_VAR_EXEC_MEM_LIM###
      cpu: ###ZARF_VAR_EXEC_CPU_LIM###
  securityContext:
    runAsNonRoot: true
    allowPrivilegeEscalation: false
    runAsUser: 1001
    capabilities:
      drop:
        - ALL
server:
  enabled: true
  podSecurityContext:
    runAsNonRoot: true
    runAsUser: 1001
  rbac:
    create: false
  securityContext:
    readOnlyRootFilesystem: true
    runAsNonRoot: true
    allowPrivilegeEscalation: false
    runAsUser: 1001
    capabilities:
      drop:
        - ALL
  serviceAccount:
    create: false
    name: "argo-server"
  authModes:
    - "server"
  extraArgs:
    - "--access-control-allow-origin=*"
  sso:
    enabled: false
    rabc:
      enabled: false
    scopes: []
    issuer: "https://sso.###ZARF_VAR_DOMAIN###/realms/uds"
    clientId:
      name: ###ZARF_VAR_CLIENT_SECRET###
      key: clientId
    clientSecret:
      name: ###ZARF_VAR_CLIENT_SECRET###
      key: secret
    redirectUrl: "https://workflows.###ZARF_VAR_DOMAIN###/ouath2/callback"
    insecureSkipVerify: true

  image:
    registry: "###ZARF_VAR_ARGO_REGISTRY###"
    repository: "###ZARF_VAR_ARGO_SERVER_REPO###/argocli"
  resources:
    requests:
      memory: ###ZARF_VAR_SERVER_MEM_REQ###
      cpu: ###ZARF_VAR_SERVER_CPU_REQ###
    limits:
      memory: ###ZARF_VAR_SERVER_MEM_LIM###
      cpu: ###ZARF_VAR_SERVER_CPU_LIM###

  podSecurityContext:
    runAsNonRoot: true
    runAsUser: 1001
  rbac:
    create: false
  securityContext:
    readOnlyRootFilesystem: true
    runAsNonRoot: true
    allowPrivilegeEscalation: false
    runAsUser: 1001
    capabilities:
      drop:
        - ALL
  serviceAccount:
    create: false
    name: "argo-server"
useStaticCredentials: ###ZARF_VAR_DEV_DEPLOYMENT###
artifactRepositoryRef:
  artifact-repositories:
    annotations:
      workflows.argoproj.io/default-artifact-repository: "###ZARF_VAR_DEFAULT_ARTIFACT_REPOSITORY###"
    aws-artifact-repository:
      archiveLogs: true
      s3:
        bucket: "###ZARF_VAR_S3_BUCKET_NAME###"
        endpoint: "###ZARF_VAR_S3_ENDPOINT###"
        region: "###ZARF_VAR_S3_REGION###"
        roleARN: "###ZARF_VAR_IRSA_ROLE_ARN###"
        encryptionOptions:
          enableEncryption: true
        insecure: false
    minio-artifact-repository:
      archiveLogs: true
      s3:
        bucket: "###ZARF_VAR_S3_BUCKET_NAME###"
        endpoint: "###ZARF_VAR_S3_ENDPOINT###"
        insecure: true
        accessKeySecret:
          name: minio-tokens
          key: accesskey
        secretKeySecret:
          name: minio-tokens
          key: secretkey
